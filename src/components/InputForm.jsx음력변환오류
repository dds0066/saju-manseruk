import React, { useState } from 'react';
import { Calendar, MapPin, Clock, User, ArrowRightLeft } from 'lucide-react';
import { LunarToSolarConverter } from './LunarToSolarConverter';

export const InputForm = ({ onSubmit, isLoading }) => {
  const [formData, setFormData] = useState({
    year: '',
    month: '',
    day: '',
    hour: '12',
    minute: '0',
    cityKey: 'seoul',
    gender: 'male'
  });

  const [showConverter, setShowConverter] = useState(false);

  const cities = {
    seoul: { name: '서울', longitude: 126.9780 },
    busan: { name: '부산', longitude: 129.0756 },
    daegu: { name: '대구', longitude: 128.6014 },
    incheon: { name: '인천', longitude: 126.7052 },
    gwangju: { name: '광주', longitude: 126.8526 },
    daejeon: { name: '대전', longitude: 127.3845 },
    ulsan: { name: '울산', longitude: 129.3114 },
    sejong: { name: '세종', longitude: 127.2890 },
    suwon: { name: '수원', longitude: 127.0286 },
    changwon: { name: '창원', longitude: 128.6811 },
    goyang: { name: '고양', longitude: 126.8355 },
    yongin: { name: '용인', longitude: 127.1775 },
    jeju: { name: '제주', longitude: 126.5219 }
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    console.log('handleSubmit 호출됨');
    console.log('현재 formData:', formData);
    
    // 모든 필수 필드 검증
    if (!formData.year || !formData.month || !formData.day) {
      console.log('필수 필드 누락:', {
        year: formData.year,
        month: formData.month,
        day: formData.day
      });
      alert('생년월일을 모두 입력해주세요.');
      return;
    }

    // 빈 문자열이나 공백 체크
    if (formData.year.trim() === '' || formData.month.trim() === '' || formData.day.trim() === '') {
      console.log('빈 문자열 필드 발견:', {
        year: `"${formData.year}"`,
        month: `"${formData.month}"`,
        day: `"${formData.day}"`
      });
      alert('생년월일을 모두 입력해주세요.');
      return;
    }

    // 숫자 변환 및 유효성 검사
    const year = parseInt(formData.year);
    const month = parseInt(formData.month);
    const day = parseInt(formData.day);
    const hour = parseInt(formData.hour);
    const minute = parseInt(formData.minute);

    console.log('변환된 숫자들:', { year, month, day, hour, minute });

    if (isNaN(year) || isNaN(month) || isNaN(day) || isNaN(hour) || isNaN(minute)) {
      console.log('숫자 변환 실패:', {
        year: isNaN(year),
        month: isNaN(month),
        day: isNaN(day),
        hour: isNaN(hour),
        minute: isNaN(minute)
      });
      alert('올바른 숫자를 입력해주세요.');
      return;
    }

    if (year < 1900 || year > 2100) {
      alert('년도는 1900년~2100년 사이로 입력해주세요.');
      return;
    }

    if (month < 1 || month > 12) {
      alert('월은 1~12 사이로 입력해주세요.');
      return;
    }

    if (day < 1 || day > 31) {
      alert('일은 1~31 사이로 입력해주세요.');
      return;
    }

    // 올바른 데이터 형식으로 전달 (App.js 호환성 고려)
    const submitData = {
      year: year.toString(),
      month: month.toString().padStart(2, '0'),
      day: day.toString().padStart(2, '0'),
      hour: hour.toString().padStart(2, '0'),
      minute: minute.toString().padStart(2, '0'),
      cityKey: formData.cityKey || 'seoul', // 기본값 설정
      gender: formData.gender || 'male'     // 기본값 설정
    };

    // App.js에서 요구할 수 있는 추가 검증
    if (!submitData.cityKey || submitData.cityKey === '') {
      alert('출생지를 선택해주세요.');
      return;
    }

    if (!submitData.gender || submitData.gender === '') {
      alert('성별을 선택해주세요.');
      return;
    }

    console.log('최종 제출할 데이터:', submitData);
    console.log('onSubmit 함수 호출 시작');
    
    try {
      // App.js가 기대하는 정확한 형식으로 호출
      const result = onSubmit(submitData);
      console.log('onSubmit 함수 호출 완료', result);
    } catch (error) {
      console.error('onSubmit 호출 중 에러:', error);
      alert('사주 계산 중 오류가 발생했습니다: ' + error.message);
    }
  };

  const handleChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    console.log(`${field} 변경됨:`, value); // 디버깅용
  };

  // 변환기에서 받은 양력 날짜를 폼에 적용
  const handleConvertedDate = (convertedData) => {
    console.log('변환된 데이터 받음:', convertedData); // 디버깅용
    
    setFormData({
      ...formData,
      year: convertedData.year.toString(),
      month: convertedData.month.toString().padStart(2, '0'),
      day: convertedData.day.toString().padStart(2, '0'),
      hour: convertedData.hour.toString().padStart(2, '0'),
      minute: convertedData.minute.toString().padStart(2, '0')
    });
    
    setShowConverter(false);
    
    // 변환 성공 알림
    alert(`✅ 양력 ${convertedData.year}년 ${convertedData.month}월 ${convertedData.day}일로 설정되었습니다!`);
  };

  return (
    <>
      <div className="min-h-screen bg-gradient-to-br from-indigo-900 via-purple-900 to-pink-900 flex items-center justify-center p-4 relative overflow-hidden">
        {/* 배경 장식 */}
        <div className="absolute inset-0">
          {[...Array(50)].map((_, i) => (
            <div
              key={i}
              className="absolute text-yellow-200 opacity-20"
              style={{
                left: `${Math.random() * 100}%`,
                top: `${Math.random() * 100}%`,
                animationDelay: `${Math.random() * 5}s`
              }}
            >
              ⭐
            </div>
          ))}
        </div>

        <div className="bg-white/10 backdrop-blur-lg rounded-3xl shadow-2xl p-8 w-full max-w-md border border-white/20 relative z-10">
          {/* 헤더 */}
          <div className="text-center mb-8">
            <h1 className="text-4xl font-bold bg-gradient-to-r from-yellow-300 to-pink-300 bg-clip-text text-transparent mb-2">
              🔮 사주만세력 📜
            </h1>
            <p className="text-white/80 text-sm">정확한 출생정보를 입력해주세요 (양력 기준)</p>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* 음력 변환 버튼 */}
            <div className="text-center">
              <button
                type="button"
                onClick={() => setShowConverter(true)}
                className="bg-gradient-to-r from-purple-500 to-pink-500 text-white py-2 px-6 rounded-lg font-medium hover:from-purple-600 hover:to-pink-600 transition-all flex items-center justify-center gap-2 mx-auto shadow-lg"
              >
                <ArrowRightLeft size={16} />
                🌙 음력 → 양력 변환하기
              </button>
              <p className="text-white/60 text-xs mt-2">음력 생일이신가요? 클릭해서 양력으로 변환하세요!</p>
            </div>

            {/* 생년월일 */}
            <div className="space-y-3">
              <label className="block text-white font-medium text-sm">
                <Calendar className="inline mr-2" size={16} />
                생년월일 (양력)
              </label>
              <div className="grid grid-cols-3 gap-3">
                <input
                  type="text"
                  placeholder="년 (YYYY)"
                  value={formData.year}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^0-9]/g, ''); // 숫자만 허용
                    handleChange('year', value);
                  }}
                  className="bg-white/20 border border-white/30 rounded-lg px-3 py-3 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent"
                  maxLength="4"
                  required
                />
                <input
                  type="text"
                  placeholder="월 (MM)"
                  value={formData.month}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^0-9]/g, ''); // 숫자만 허용
                    if (parseInt(value) <= 12 || value === '') {
                      handleChange('month', value);
                    }
                  }}
                  className="bg-white/20 border border-white/30 rounded-lg px-3 py-3 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent"
                  maxLength="2"
                  required
                />
                <input
                  type="text"
                  placeholder="일 (DD)"
                  value={formData.day}
                  onChange={(e) => {
                    const value = e.target.value.replace(/[^0-9]/g, ''); // 숫자만 허용
                    if (parseInt(value) <= 31 || value === '') {
                      handleChange('day', value);
                    }
                  }}
                  className="bg-white/20 border border-white/30 rounded-lg px-3 py-3 text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent"
                  maxLength="2"
                  required
                />
              </div>
              
              {/* 현재 입력된 값 표시 (디버깅용) */}
              <div className="text-white/60 text-xs">
                현재 입력: {formData.year || '____'}년 {formData.month || '__'}월 {formData.day || '__'}일
              </div>
            </div>

            {/* 출생시간 */}
            <div className="space-y-3">
              <label className="block text-white font-medium text-sm">
                <Clock className="inline mr-2" size={16} />
                출생시간
              </label>
              <div className="grid grid-cols-2 gap-3">
                <select
                  value={formData.hour}
                  onChange={(e) => handleChange('hour', e.target.value)}
                  className="bg-white/20 border border-white/30 rounded-lg px-3 py-3 text-white focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent"
                >
                  {Array.from({ length: 24 }, (_, i) => (
                    <option key={i} value={i.toString().padStart(2, '0')} className="text-gray-800">
                      {i.toString().padStart(2, '0')}시
                    </option>
                  ))}
                </select>
                <select
                  value={formData.minute}
                  onChange={(e) => handleChange('minute', e.target.value)}
                  className="bg-white/20 border border-white/30 rounded-lg px-3 py-3 text-white focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent"
                >
                  {Array.from({ length: 60 }, (_, i) => (
                    <option key={i} value={i.toString().padStart(2, '0')} className="text-gray-800">
                      {i.toString().padStart(2, '0')}분
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* 출생지 */}
            <div className="space-y-3">
              <label className="block text-white font-medium text-sm">
                <MapPin className="inline mr-2" size={16} />
                출생지
              </label>
              <select
                value={formData.cityKey}
                onChange={(e) => {
                  console.log('출생지 변경:', e.target.value);
                  handleChange('cityKey', e.target.value);
                }}
                className="w-full bg-white/20 border border-white/30 rounded-lg px-3 py-3 text-white focus:outline-none focus:ring-2 focus:ring-purple-400 focus:border-transparent"
                required
              >
                <option value="" className="text-gray-800">출생지를 선택하세요</option>
                {Object.entries(cities).map(([key, city]) => (
                  <option key={key} value={key} className="text-gray-800">
                    {city.name}
                  </option>
                ))}
              </select>
              <div className="text-white/60 text-xs">
                선택된 출생지: {cities[formData.cityKey]?.name || '선택 안됨'}
              </div>
            </div>

            {/* 성별 */}
            <div className="space-y-3">
              <label className="block text-white font-medium text-sm">
                <User className="inline mr-2" size={16} />
                성별
              </label>
              <div className="grid grid-cols-2 gap-3">
                <button
                  type="button"
                  onClick={() => {
                    console.log('성별 변경: male');
                    handleChange('gender', 'male');
                  }}
                  className={`py-3 px-4 rounded-lg font-medium transition-all ${
                    formData.gender === 'male'
                      ? 'bg-blue-500 text-white shadow-lg'
                      : 'bg-white/20 text-white/80 hover:bg-white/30'
                  }`}
                >
                  남성
                </button>
                <button
                  type="button"
                  onClick={() => {
                    console.log('성별 변경: female');
                    handleChange('gender', 'female');
                  }}
                  className={`py-3 px-4 rounded-lg font-medium transition-all ${
                    formData.gender === 'female'
                      ? 'bg-pink-500 text-white shadow-lg'
                      : 'bg-white/20 text-white/80 hover:bg-white/30'
                  }`}
                >
                  여성
                </button>
              </div>
              <div className="text-white/60 text-xs">
                선택된 성별: {formData.gender === 'male' ? '남성' : formData.gender === 'female' ? '여성' : '선택 안됨'}
              </div>
            </div>

            {/* 제출 버튼 */}
            <button
              type="submit"
              disabled={isLoading}
              className="w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white py-4 px-6 rounded-lg font-bold text-lg hover:from-purple-700 hover:to-pink-700 transition-all duration-300 shadow-xl hover:shadow-purple-400/50 transform hover:-translate-y-1 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              {isLoading ? (
                <div className="flex items-center justify-center gap-2">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                  사주 분석 중...
                </div>
              ) : (
                '🔮 사주 만세력 보기 ✨'
              )}
            </button>
          </form>

          {/* 하단 안내 */}
          <div className="mt-6 text-center text-white/60 text-xs">
            <p>🌟 정확한 시간을 모르면 12:00으로 설정하세요</p>
            <p>📍 출생지는 시간 보정을 위해 사용됩니다</p>
          </div>
        </div>
      </div>

      {/* 음력-양력 변환기 모달 */}
      {showConverter && (
        <LunarToSolarConverter
          onClose={() => setShowConverter(false)}
          onConvert={handleConvertedDate}
        />
      )}
    </>
  );
};